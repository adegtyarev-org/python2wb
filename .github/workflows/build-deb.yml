name: Test & Build .deb

on:
  pull_request: {}
  push:
    branches: [ main ]

jobs:
  version_test:
    runs-on: self-hosted
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install --user poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Get version from debian/changelog
        id: get_version
        run: |
          VER=$(head -n1 debian/changelog | sed -E 's/^[^(]+\(([^)]+)\).*/\1/')
          echo "version=$VER" >> $GITHUB_OUTPUT

      - name: Check version bump in PR
        if: github.event_name == 'pull_request'
        run: |
          BASE=$(git show origin/${{ github.event.pull_request.base.ref }}:debian/changelog \
            | head -n1 | sed -E 's/^[^(]+\(([^)]+)\).*/\1/')
          if [ "$BASE" = "${{ steps.get_version.outputs.version }}" ]; then
            echo "Error: версия не изменилась ($BASE)" >&2
            exit 1
          fi

      - name: Generate pyproject.toml from debian/control
        run: |
          VER="${{ steps.get_version.outputs.version }}"
          NAME=$(grep '^Package:' debian/control | cut -d' ' -f2)
          DESC=$(grep '^Description:' debian/control | cut -d' ' -f2-)
          MAINT=$(grep '^Maintainer:' debian/control | cut -d' ' -f2-)
          LICENSE=$(grep '^License:' debian/control | cut -d' ' -f2-)

          cat <<EOF > pyproject.toml
          [tool.poetry]
          name = "$NAME"
          version = "$VER"
          description = "$DESC"
          authors = ["$MAINT"]
          license = "$LICENSE"
          
          [tool.poetry.dependencies]
          python = "^3.8"
          paho-mqtt = "^1.6"
          
          [build-system]
          requires = ["poetry-core>=1.0.0"]
          build-backend = "poetry.core.masonry.api"
          EOF

      - name: Install & Test
        run: |
          poetry install --only main
          poetry run pip install pytest
          poetry run pytest || exit_code=$?
          if [ "$exit_code" -eq 5 ]; then
            echo "⚠️ No tests were collected. This is allowed."
          else
            exit $exit_code
          fi

  build_deb:
    needs: version_test
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dpkg tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev

      - name: Patch version into control
        run: |
          VER=${{ needs.version_test.outputs.version }}
          sed -i -E "s/^Version: .*/Version: $VER/" debian/control

      - name: Build .deb
        run: |
          VER=${{ needs.version_test.outputs.version }}
          mkdir -p build/python2wb_$VER/DEBIAN
          cp debian/control build/python2wb_$VER/DEBIAN/control

          mkdir -p build/python2wb_$VER/usr/lib/python3/dist-packages
          cp -r src/python2wb build/python2wb_$VER/usr/lib/python3/dist-packages/

          mkdir -p build/python2wb_$VER/usr/share/doc/python2wb
          cp LICENSE build/python2wb_$VER/usr/share/doc/python2wb/

          dpkg-deb --build build/python2wb_$VER

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python2wb_${{ needs.version_test.outputs.version }}.deb
          path: build/*.deb

      - name: Create tag
        id: create_tag
        if: github.ref == 'refs/heads/main'
        run: |
          TAG="v${{ needs.version_test.outputs.version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Release on GitHub
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: build/*.deb
          tag_name: ${{ steps.create_tag.outputs.tag }}
          name: ${{ steps.create_tag.outputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_pypi:
    needs: build_deb
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install --user poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Generate pyproject.toml from debian/control
        run: |
          VER=$(head -n1 debian/changelog | sed -E 's/^[^(]+\(([^)]+)\).*/\1/')
          NAME=$(grep '^Package:' debian/control | cut -d' ' -f2)
          DESC=$(grep '^Description:' debian/control | cut -d' ' -f2-)
          MAINT=$(grep '^Maintainer:' debian/control | cut -d' ' -f2-)
          LICENSE=$(grep '^License:' debian/control | cut -d' ' -f2-)

          cat > pyproject.toml <<EOF
          [tool.poetry]
          name = "$NAME"
          version = "$VER"
          description = "$DESC"
          authors = ["$MAINT"]
          license = "$LICENSE"
          
          [tool.poetry.dependencies]
          python = "^3.8"
          paho-mqtt = "^1.6"
          
          [build-system]
          requires = ["poetry-core>=1.0.0"]
          build-backend = "poetry.core.masonry.api"
          EOF

      - name: Build wheel
        run: |
          poetry install --only main
          poetry build -f wheel

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry publish --username __token__ --password "$POETRY_PYPI_TOKEN_PYPI"      
